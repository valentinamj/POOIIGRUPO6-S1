2. Compilar y ejecutar la clase "Circulo.java". ¿Puedes ejecutar la clase “Circulo.java”? ¿Porqué?
- No, no se puede ejecutar directamente la clase Circulo porque no tiene un método 'main'. En Java, el método 'main' es el punto de entrada de un programa, y es necesario para que el programa se pueda ejecutar.
3. ¿Qué pasos en común debe realizaste para ejecutar cada uno de los ejercicios? Describir conceptos del paradigma orientada a objetos.
- Implementar los métodos y constructores necesarios en la clase.
- Encapsulamiento: Las variables radio y color son privadas y solo accesibles a través de los métodos públicos getRadio() y getArea(), lo que protege los datos.
- Abstracción: La clase Circulo proporciona una representación abstracta de un círculo, sin revelar la implementación detallada de cómo se calcula el área.
- Polimorfismo: Se aplica en el constructor sobrecargado, que permite crear objetos de la clase Circulo con diferentes parámetros.
4. Ejecutar la clase “CirculoTest.java” y responde las siguientes preguntas:
a. ¿Qué es el constructor y para qué sirve?
- Un constructor es un método especial que se ejecuta automáticamente cuando se crea una instancia de una clase y se utiliza para establecer los valores iniciales de los atributos de la clase.
b. ¿Con qué método recupero el radio del círculo?
- El método para recuperar el radio del circulo es 'getRadio()'
c. ¿Por qué los atributos son privados y los métodos son públicos?
- Los atributos son privados para encapsularlos y protegerlos de modificaciones externas no deseadas. De esta manera, se garantiza que los atributos solo se puedan acceder y modificar a través de los métodos públicos de la clase, lo que permite controlar y validar los cambios.
- Los métodos son públicos para que puedan ser accedidos desde fuera de la clase permitir la interacción con los objetos de la clase. 
d. ¿Qué pasa si accedes directamente a los atributos del círculo desde el método main()?
- El compilador generara un error porque los atributos privados no son accesibles fuera de la clase que los define. Solo pueden ser accedidos o modificados mediante los métodos públicos ( getter y setter ) de la clase.
e. ¿Qué pasa si modificas directamente el atributo area del círculo desde el método main()?
- No se puede modificar directamente el atributo 'area' del circulo desde el metodo 'main()' porque no existe un atributo 'area' en la clase 'circulo'. El area se calcula en tiempo de ejecución utilizando el metodo 'getArea()'. Si se intenta acceder o modificar directamente un atributo que no existe y al compilar aparecerá un error.
f. En la clase “CirculoTest.java”, ejecuta la siguiente instrucción: System.out.println(c1.radius), donde c1 es una instancia del objeto Círculo. ¿Qué ocurrió? Explique el mensaje de error.
- Mensaje de error -> error: radius has private access in Circulo
Esto se debe a que el atributo 'radio' es privado y no puede ser accedido directamente desde fuera de la casa. Para obtener el valor de 'radio', debes usar el metodo 'getRadio()'.
g. En la clase “CirculoTest.java”, ejecuta la siguiente instrucción: c1.radius=42.0, donde c1 es una instancia del objeto Círculo. ¿Qué ocurrió?. Explique el mensaje de error.
- Error de compilación debido a que 'radio' es un atributo privado. No puedes modificar directamente un atributo privado desde afuera de la clase.
h. ¿Con qué método modificas el valor de un atributo de la clase “Circulo.java”?
- Para modificar el valor de un atributo de la clase Circulo, se puede usar 'setter'. 
i. Crear un objeto de tipo Círculo y modifica los valores por defecto. 
- Primero en la clase Circulo, creamos un setter para radio
Luego en la main, creamos un objeto circulo y modificamos su valor: c3.setRadio(3.56);
j. ¿Para qué sirve la palabra reservada “this”?. Modifique el constructor con argumentos (radio y color) y utiliza “this” y métodos setters en la clase “Circulo.java”.
- La palabra "this" se utiliza para referirse al objeto actual en una clase. En el constructor con argumentos, se puede utilizar "this" para asignar los valores de los parámetros a los atributos de la clase. También en los setters.
k. ¿Para qué sirve el método toString()?
- El método 'toString()' se utiliza para proporcionar una representación de cadena de una objeto. Se utiliza comúnmente para imprimir sobre un objetivo en una forma legible.